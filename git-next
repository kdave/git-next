#!/usr/bin/python
# git branch integration helper
#
# usage: $0 [target]
#
# generates git commands, pipe to 'sh -ex' to execute or use '-xe' directly

import ConfigParser
import sys
import datetime
import subprocess
import getopt
import re

class MyConfigParser(ConfigParser.SafeConfigParser):
    def __init__(self):
        # allow only key=value
        self.OPTCRE_NV = re.compile(
             r'(?P<option>[^=\s][^=]*)'          # very permissive!
             r'\s*(?:'                           # any number of space/tab,
             r'(?P<vi>[=])\s*'                   # optionally followed by
             # separator (either : or
             # =), followed by any #
             # space/tab
             r'(?P<value>.*))?$'                 # everything up to eol
             )
        ConfigParser.SafeConfigParser.__init__(self, allow_no_value=True)

    # Keep key names as-is, use upper case everywhere, keep case for branch names
    def optionxform(self, option):
        return option

def config_get_bool(section, value, default, debug=False):
    try:
        return config.getboolean(section, value)
    except ConfigParser.NoOptionError:
        return default

def config_get_str(section, value, default, debug=False):
    try:
        return config.get(section, value)
    except ConfigParser.NoOptionError:
        return default

fnext=open("git-next.conf")
config = MyConfigParser()
config.readfp(fnext)

# TODO: make configurable
date=datetime.datetime.now().strftime("%Y%m%d")

gitmerge='git merge --no-edit'
gitmergenoff='git merge --no-edit --no-ff'
gitmergenoffrerere='git merge --no-edit --no-ff --rerere-autoupdate'

DEBUG=False
GITMERGE=gitmergenoffrerere
AUTORESOLVE=" || git commit --no-edit"

# --fetch, -f
FETCH = False
# --recursive, -r
RECURSIVE = False
# --upstream
UPSTREAM = "master"
# --dry-run, -n
DRYRUN = True
# --remote
REMOTE = []
# --exec, -x
EXECUTE = False
# --errors, -e
CATCHERRORS = False
# --autoclean, --no-autoclean
# delete marked branches after the final target is successfuly assembled
# do not autoclean if requesting the target
AUTOCLEAN = True

def runhook(command):
    if EXECUTE:
        print "+", command
        ret = subprocess.call(command, shell = True)
        if ret != 0:
            print "ERROR: hook: shell exited with %d" % (ret)
            sys.exit(ret)
    else:
        print command

def runcmd(command):
    if EXECUTE:
        print "+", command
        ret = subprocess.call(command, shell = True)
        if CATCHERRORS:
            if ret != 0:
                print "ERROR: shell exited with %d" % (ret)
                sys.exit(ret)
    else:
        print command

def realbase(sect):
    if config.has_option(sect, "BASE") and config.has_option(sect, "MERGEBASE"):
        print "ERROR: %s: cannot have BASE and MERGEBASE" % (sect)
        sys.exit(1)
    if config.has_option(sect, "BASE"):
        return config.get(sect, "BASE")
    elif config.has_option(sect, "MERGEBASE"):
        # needs git, can be expanded instead
        try:
            return subprocess.check_output(["git", "merge-base", UPSTREAM,
                config.get(sect, "MERGEBASE")]).strip()
        except subprocess.CalledProcessError:
            return " ".join(["$(", "git", "merge-base", UPSTREAM,
                config.get(sect, "MERGEBASE"), ")"])

    else:
        print "ERROR: %s: cannot have no BASE nor MERGEBASE" % (sect)
        sys.exit(1)

def DBG(*args):
    if not DEBUG:
        return
    print "# DEBUG:"," ".join(args)

def target_name(targ):
    name = config.get(targ, "NAME")
    if config_get_bool(targ, "TIMESTAMP", False):
        name = name + "-" + date

    return name

def dump_config(args):
    DBG("ARGS " + str(len(args)))
    if len(args) == 0:
        targets = config.sections()
    else:
        targets = args
    for s in targets:
        print "SECTION", s
        branches = []
        for o in config.options(s):
            val = config.get(s, o)
            if not val:
                branches.append(o)
            else:
                print " OPTION %s=%s" % (o, config.get(s,o))
        for br in branches:
            print " TARGET %s" % (br)

def do_action_push(target, force=False, remote=None):
    DBG("PUSH " + target)

    if config.has_option(target, "HOOKPREPUSH"):
        cmd = config.get(target, "HOOKPREPUSH")
        DBG("PUSH: pre hook: " + cmd)
        runhook(cmd)

    if not remote:
        if not config.has_option(target, "REMOTE"):
            print "ERROR: %s: REMOTE not set for push" % (target)
            sys.exit(1)
    if not config.has_option(target, "RNAME"):
        print "ERROR: %s: RNAME not set for push" % (target)
        sys.exit(1)

    remote = config.get(target, "REMOTE")
    rname = config.get(target, "RNAME")
    name = target_name(target)
    if force: force = ' -f '
    else: force = ''

    runcmd("git push " + force + remote + " " + name + ":" + rname)

def action_push(target):
    do_action_push(target, False)

def action_pushf(target):
    do_action_push(target, True)

def do_tslist_target(target, keeplast, cmd):
    if not config_get_bool(target, "TIMESTAMP", False):
        return

    namebase = config.get(target, "NAME")
    branches = subprocess.check_output(["git", "branch"]).strip().split("\n")
    branches = [ x.strip() for x in branches ]
    branches = [ x[2:] if x.startswith('* ') else x for x in branches ]
    # DBG("BRANCHES", ",".join(branches))
    tokill = []
    for x in branches:
        # TODO: match configured format
        m = re.match(r'' + namebase + '-[0-9]{8}', x)
        if m:
            tokill.append(x)

    if keeplast:
        for x in tokill[:-1]:
            DBG("KILL (keeplast)",x)
            runcmd(cmd + x)
        DBG("keeplast", tokill[-1:][0])
    else:
        for x in tokill:
            DBG("KILL (all)",x)
            runcmd(cmd + x)

def do_ts(target, keeplast, cmd):
    name = target_name(target)
    DBG("NAME " + name)
    targets = gather_prereq(target, [])
    DBG("prereq",str(targets))
    if RECURSIVE:
        for t in targets:
            name = target_name(t)
            do_tslist_target(t, keeplast = keeplast, cmd = cmd)
    else:
        do_tslist_target(target, keeplast = keeplast, cmd = cmd)

def action_tslist1(target):
    DBG("TSLIST1 " + target)
    do_ts(target, keeplast = True, cmd = '')

def action_tslist(target):
    DBG("TSLIST " + target)
    do_ts(target, keeplast = False, cmd = '')

def do_ts_remote(target, keeplast):
    if REMOTE:
        remote = REMOTE
    else:
        remote = [ '.' ]

    for r in remote:
        if r == '.':
            cmd = 'git branch -D '
        else:
            cmd = 'git push -f %s :' % (r)
        do_ts(target, keeplast = keeplast, cmd = cmd)

def action_tsclean1(target):
    DBG("TSCLEAN1 " + target)
    do_ts_remote(target, keeplast = True);

def action_tsclean(target):
    DBG("TSCLEAN1 " + target)
    do_ts_remote(target, keeplast = False);

def do_checkout(target):
    name = target_name(target)
    DBG("CHECKOUT " + target + ": " + name)
    runcmd("git checkout " + name)

def action_checkout(target):
    DBG("CHECKOUT " + target)
    do_checkout(target)

# TODO: checkout or current, no diff, no --cached diff
# then git rebase UPSTREAM
def do_rebase(target):
    name = target_name(target)
    if UPSTREAM == "master":
        print "ERROR: rebase on master not allowed for now"
        sys.exit(12)
    if not UPSTREAM:
        print "ERROR: set --upstream for rebase"
        sys.exit(12)
    DBG("REBASE " + target + ": " + name + " on " + UPSTREAM)
    runcmd("git rebase " + name + " " + UPSTREAM)

def action_rebase(target):
    DBG("REBASE " + target)
    do_rebase(target)

def action_fetch(target):
    DBG("FETCH " + target)
    targets = gather_prereq(target, [])
    remotes = []
    for t in targets:
        r = config_get_str(t, 'REMOTE', None)
        if r:
            remotes.append(r)
    for r in set(remotes):
        runcmd("git fetch " + r)

# gather list of sections in the topological order as included
# using the @directive instead of branch
def gather_prereq(targ, stack):
    name = config.get(targ, "NAME")

    prereq = []

    DBG("gather: " + targ + ", stack=" + str(stack))

    if targ in stack:
        print "ERROR: indirect recursion in " + targ
        print "Stack:\n\t" + "\n\t".join(stack)
        sys.exit(13)
    stack.append(targ)

    for br in config.options(targ):
        val = config.get(targ, br)
        if val:
            DBG("prereq skip", br, "=", val)
            continue
        if br.startswith("@"):
            DBG("found rec", br[1:])
            if br[1:] == targ:
                print "ERROR: self recursion in " + targ
                print "Stack:\n\t" + "\n\t".join(stack)
                sys.exit(13)
            for pr in gather_prereq(br[1:], stack):
                if not (pr in prereq):
                    prereq.append(pr)

    stack.pop()
    return prereq + [ targ ]

# do leaf target, no recursion
def dotarget(targ):
    DBG("do target " + targ)

    # mandatory
    name = config.get(targ, "NAME")
    gitmergeoptions = ''
    try:
        gitmergeoptions = config.get(targ, "GITMERGEOPTIONS")
        DBG("use additional git merge options " + gitmergeoptions)
    except ConfigParser.NoOptionError:
        pass

    sealed = config_get_bool(targ, "SEALED", False)
    if sealed:
        runcmd("# THE BRANCH " + name + " IS SEALED")
        sys.exit(2)

    try:
        remote = config.get(targ, "REMOTE")
        rbranch = config.get(targ, "RBRANCH")
        if FETCH:
            runcmd("git fetch %s" % remote)
    except ConfigParser.NoOptionError:
        remote = None
        rbranch = None

    ts=""
    if config_get_bool(targ, "TIMESTAMP", False):
        ts="-%s" % (date)

    if rbranch:
        runcmd("git branch -D %s%s || true" % (name, ts))
        runcmd("git checkout -t -b %s%s remotes/%s/%s" % (name, ts, remote, rbranch))
    else:
        base = realbase(targ)
        runcmd("git branch -D %s%s || true" % (name, ts))
        runcmd("git checkout -b %s%s %s" % (name, ts, base))

        for br in config.options(targ):
            val = config.get(targ, br)
            if val: continue
            if br.startswith("@"):
                DBG("grab result of " + br[1:])
                br = target_name(br[1:])
            runcmd(GITMERGE + " %s %s" % (gitmergeoptions, (br) + AUTORESOLVE))

##############################################################################
# main
optlist, args = getopt.getopt(sys.argv[1:], 'efnrx',
        [ 'list', 'dump-config', 'debug', 'fetch', 'recursive',
          'upstream=', 'dry-run', 'remote=', 'exec', 'errors',
          'no-autoclean', 'autoclean'])

known_actions = {
    # push target branch to remote
    # optional parameter: remote
    '+push':     action_push,
    # forced push of target branch to remote
    # optional parameter: remote
    '+pushf':    action_pushf,
    # list timestamped branches
    '+tslist':   action_tslist,
    # list timestamped branches except the latest one
    '+tslist1':  action_tslist1,
    # clean timestamped branches
    '+tsclean':  action_tsclean,
    # clean timestamped branches except the latest one
    '+tsclean1': action_tsclean1,
    # checkout the target branch
    '+checkout': action_checkout,
    '+co':       action_checkout,
    # rebase on top of the target branch
    # mandatory parameter: upstream
    '+rebase':   action_rebase,
    # fetch all remotes
    '+fetch':   action_fetch,
}

if '--debug' in [x[0] for x in optlist]:
    DEBUG = True

DBG("OPTS " + str(optlist))
DBG("ARGS " + str(args))

for opt in optlist:
    if opt[0] == '--dump-config':
        dump_config(args)
        sys.exit(0)
    if opt[0] == '--list':
        for s in config.sections():
            print "SECTION:", s
    if opt[0] in ('--fetch', '-f'):
        FETCH = True
    if opt[0] in ('--recursive', '-r'):
        RECURSIVE = True
    if opt[0] == '--upstream':
        UPSTREAM = opt[1]
    if opt[0] in ('--dry-run', '-n'):
        DRYRUN = True
    if opt[0] == '--remote':
        REMOTE += opt[1].split(',')
    if opt[0] in ('--errors', '-e'):
        CATCHERRORS = True;
    if opt[0] in ('--exec', '-x'):
        EXECUTE = True;
    if opt[0] == '--autoclean':
        AUTOCLEAN = True
    if opt[0] == '--no-autoclean':
        AUTOCLEAN = False

actions=[]
for opt in args:
    DBG("OPTION: " + opt)
    if opt in known_actions.keys():
        DBG("DO " + opt)
        actions.append(known_actions[opt])
        continue
    if opt.startswith('+'):
        print "ERROR: unknown action %s" % (opt)
        sys.exit(13)
    targets = gather_prereq(opt, [])
    DBG("prereq",str(targets))
    # default action is just generate and print
    if len(actions) == 0:
        if RECURSIVE:
            DBG("RECURSIVELY generate deps")
            for t in targets:
                dotarget(t)
        else:
            DBG("CREATE target")
            for t in targets[-1:]:
                dotarget(t)
    else:
        DBG("ACTIONS: " + str(actions))
        for act in actions:
            act(opt)
